// ==========================================================================
// Mixins
// ==========================================================================

@mixin e($elements...) {
	@each $element in $elements {
		&__#{$element} {
		@content;
		}
	}
}
  
@mixin m($modifiers...) {
	@each $modifier in $modifiers {
		&--#{$modifier} {
		@content;
		}
	}
}

@mixin flex($disp: flex, $dir: null, $wrap: null, $just: null, $algn: null) {
	display: $disp;
	flex-direction: $dir;
	flex-wrap: $wrap;
	justify-content: $just;
	align-items: $algn;
}

@mixin text($size: null, $weight: null, $height: null, $align: null, $color: null) {
    font-size: $size;
    font-weight: $weight;
	line-height: $height;
    text-align: $align;
    color: $color;
}

@mixin bg-colors($map) {
	@each $theme, $color in $map {
	  &--#{$theme} {
		color: $color-white;
		background-color: $color;
		border-color: $color;
	  }
	}
}

@mixin bg-hover-colors($map) {
	@each $theme, $color in $map {
	  &--#{$theme} {
		&:hover {
		  background-color: $color;
		}
	  }
	}
}

@mixin mq($break) {
	@if $break == "x-small" {
	  @media (min-width: $brkpoint-xs) {
		@content;
	  }
	}
	@else if $break == "small" {
	  @media (min-width: $brkpoint-sm) {
		@content;
	  }
	}
	@else if $break == "medium" {
	  @media (min-width: $brkpoint-md) {
		@content;
	  }
	}
	@else if $break == "large" {
		@media (min-width: $brkpoint-lg) {
		  @content;
		}
	}
	@else {
		@error "Whoops! No value could be retrieved for `#{$break}`. "
	}
}